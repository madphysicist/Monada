<?xml version="1.0" encoding="UTF-8"?>

<!-- 
  build.xml

  Mad Physicist Monada Project

  The MIT License (MIT)

  Copyright (c) 2013 by Joseph Fox-Rabinovitz

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
-->

<!--
  The main build file for the Monada project. Type "ant -projecthelp" for a
  listing of the available targets. The project build and documentation can be
  run with the "all" target. Testing is done with TestNG using the "test"
  target. The CLI parser UI can be run with the "run-cli" target.

  Set the value of the "DEBUG" property near the top of this file to determine
  whether the library will be compiled in debug mode or not. The "DEBUG-test"
  property determines the same thing for the test classes. It is normally set
  to the same value as "DEBUG".

  Author:   Joseph Fox-Rabinovitz
  Version:  1.0.0, 12 Nov 2013 - J. Fox-Rabinovitz - Created.
  Version:  2.0.0, 26 Aug 2014 - J. Fox-Rabinovitz - Updated with more dynamic dependency configuration.
  Version:  2.0.1, 26 Aug 2014 - J. Fox-Rabinovitz - Adapted from JForm.
  Since:    2.0.1
-->

<project name="Monada" default="all" basedir=".">

    <description>Builds, documents, tests and runs Monada.</description>

    <property name="DEBUG" value="true" />
    <property name="DEBUG-test" value="${DEBUG}" />

    <import file="config/setup.xml"/>

    <!-- Suite Build Targets -->

    <target name="clean" depends="clean-compile,clean-doc,clean-jar,clean-test"
            description="removes all build artifacts, including test and documentation">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${jar.dir}" />
    </target>

    <target name="compile" depends="compile-init"
            description="compiles the suite source code into class files">
        <mkdir dir="${main.classes.dir}" />
        <javac classpathref="compile-lib"
               srcdir="${main.src.dir}"
               destdir="${main.classes.dir}"
               excludes="**/package-info.java"
               includeantruntime="false"
               debug="${DEBUG}">
            <compilerarg value="-Xlint:all" />
        </javac>
        <copy todir="${main.classes.dir}">
            <fileset dir="${main.src.dir}" excludes="**/*.java"/>
        </copy>
    </target>

    <target name="clean-compile"
            description="removes all compiled suite classes">
        <delete dir="${main.classes.dir}" />
    </target>

    <target name="jar" depends="compile"
            description="bundles the compiled suite classes into a jar file">
        <mkdir dir="${jar.dir}" />
        <jar destfile="${jar.file}"
             basedir="${main.classes.dir}"
             excludes="">
            <manifest>
                <attribute name="Main-Class" value="${run.cli.class}" />
            </manifest>
        </jar>
    </target>

    <target name="clean-jar"
            description="Removes the suite jar file">
        <delete file="${jar.file}" />
    </target>

    <target name="doc" depends="compile"
            description="creates javadoc documentation of the suite classes">
        <mkdir dir="${main.doc.dir}" />
        <javadoc sourcepath="${main.src.dir}"
                 destdir="${main.doc.dir}"
                 access="private"
                 encoding="UTF-8"
                 version="true"
                 author="true"
                 windowtitle="Monada Project - Suite Developer Documentation"
                 source="1.7"
                 serialwarn="true"
                 use="true">
            <doctitle><![CDATA[Monada Project<br />API Specification]]></doctitle>
            <header><![CDATA[<b>Monada Project<br />Unit Manipulation Suite</b>]]></header>
            <footer><![CDATA[<b>Monada Project<br />Unit Manipulation Suite</b>]]></footer>
            <bottom><![CDATA[Copyright &copy; 2013 by Joseph Fox-Rabinovitz under the MIT License]]></bottom>
            <link href="http://docs.oracle.com/javase/7/docs/api/" offline="false" />
            <!-- TODO: Include stable link to JTools javadocs /-->
            <classpath>
                <path refid="compile-lib" />
                <path location="${main.classes.dir}" />
            </classpath>
        </javadoc>
    </target>

    <target name="clean-doc"
            description="removes javadoc documentation of the the suite classes">
        <delete dir="${main.doc.dir}" />
    </target>

    <target name="doc-jar" depends="doc"
            description="packages the suite javadoc into a jar file">
        <jar destfile="${doc.jar}"
             basedir="${main.doc.dir}"
             excludes="" />
    </target>

    <target name="clean-doc-jar"
            description="removes the packaged suite javadoc">
        <delete file="${doc.jar}" />
    </target>

    <target name="src-jar"
            description="packages the suite source code into a jar file">
        <jar destfile="${src.jar}"
             basedir="${main.src.dir}"
             excludes="" />
    </target>

    <target name="clean-src-jar"
            description="removes the packaged suite source code">
        <delete file="${doc.jar}" />
    </target>

    <!-- Demo Run Targets -->

    <target name="run-cli" depends="jar"
            description="runs the CLI parser application">
        <java fork="true" classname="${run.cli.class}">
            <classpath>
                <path refid="compile-lib" />
                <path location="${jar.file}" />
            </classpath>
        </java>
    </target>

    <!-- Test Build Targets -->

    <target name="clean-test" depends="clean-testng"
            description="removes all artifacts generated by tests">
        <delete dir="${test.classes.dir}" />
        <delete dir="${test.doc.dir}" />
        <delete dir="${test.reports.dir}" />
    </target>

    <target name="compile-test" depends="compile,compile-test-init"
            description="compiles the test source code into class files">
        <mkdir dir="${test.classes.dir}" />

        <javac srcdir="${test.src.dir}"
               destdir="${test.classes.dir}"
               debug="${DEBUG-test}"
               excludes="**/package-info.java"
               includeantruntime="false"
               classpathref="compile-test-lib" />
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="**/*.java,**/*.xml"/>
        </copy>

    </target>

    <target name="clean-compile-test"
            description="removes all compiled test classes">
        <delete dir="${test.classes.dir}" />
    </target>

    <target name="doc-test" depends="compile,compile-test,doc"
            description="creates javadoc documentation of the test classes">
        <mkdir dir="${test.doc.dir}" />
        <javadoc sourcepath="${test.src.dir}"
                 destdir="${test.doc.dir}"
                 access="private"
                 encoding="UTF-8"
                 version="true"
                 author="true"
                 windowtitle="Monada Project - Test Suite Developer Documentation"
                 source="1.7"
                 serialwarn="true"
                 use="true">
            <doctitle><![CDATA[Monada Project<br />API Specification]]></doctitle>
            <header><![CDATA[<b>Monada Project<br />Test Suite</b>]]></header>
            <footer><![CDATA[<b>Monada Project<br />Test Suite</b>]]></footer>
            <bottom><![CDATA[Copyright &copy; 2013 by Joseph Fox-Rabinovitz under the MIT License]]></bottom>
            <link href="http://docs.oracle.com/javase/7/docs/api/" offline="false" />
            <link href="http://testng.org/javadoc/" offline="false" />
            <link href="../../dist/javadoc/" />
            <!-- TODO: Include stable link to JTools javadocs /-->
            <classpath>
                <path refid="compile-test-lib" />
                <path location="${test.classes.dir}" />
            </classpath>
        </javadoc>
    </target>

    <target name="clean-doc-test"
            description="removes javadoc documentation of the test classes">
        <delete dir="${test.doc.dir}" />
    </target>

    <!-- Test Run Targets -->

    <target name="testng" depends="compile-test,testng-init"
            description="runs a TestNG unit test suite on the suite classes">

        <mkdir dir="${test.testng.out.dir}" />
        <testng outputdir="${test.testng.out.dir}" classpathref="test-lib">
            <xmlfileset file="${test.testng.file}" />
        </testng>
    </target>

    <target name="testng-failed" if="test.testng.failed.available"
            depends="compile-test,testng-init,testng-failed-init"
            description="reruns only the failed TestNG unit tests from a pervious run">
        <testng outputdir="${test.testng.out.dir}" classpathref="test-lib">
            <xmlfileset file="${test.testng.failed.xml.file}" />
        </testng>
    </target>

    <target name="clean-testng" description="removes TestNG artifacts">
        <delete file="${test.testng.failed.xml.file}" />
        <delete dir="${test.testng.out.dir}" />
    </target>

    <!-- Meta-Targets -->

    <target name="rebuild" depends="clean-compile,clean-jar,jar"
            description="rebuilds the library jar from scratch after a clean" />

    <target name="all" depends="clean,jar,doc-jar,src-jar"
            description="cleans the project and creates all build, distribution, source, and documentation artifacts" />

    <target name="test" depends="testng"
            description="creates reports from the unit tests (static and coverage are coming)" />

</project>

